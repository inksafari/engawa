---
export const prerender = true
// import { getCollection, getEntry, getEntries } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import type { MarkdownHeading } from 'astro'
// import PageLayout from '../../layouts/PageLayout.astro'
import PostLayout from '../../layouts/PostLayout.astro'
import VertLayout from '../../layouts/VertLayout.astro'
import { getCleanSlug } from '../../utilities/getPermaLink.js'
import { fetchPosts } from '../../utilities/getPosts.js'

export interface Props {
  entry: CollectionEntry<'pages'> | CollectionEntry<'posts'>
  headings: MarkdownHeading[]
}

export async function getStaticPaths() {
  //const pages = await getCollection('page', (entry) => {
  //return !['home'].includes(entry.slug) && !entry.data.isDraft;
  //});
  const allPosts = await fetchPosts({ collection: 'posts' })
  const posts = allPosts.map(getCleanSlug)

  //return [...pages, ...posts].map((entry) => ({
  return [...posts].flatMap((entry) => ({
    params: { slug: String(entry.slug) },
    props: { entry },
  }))
}

const { entry } = Astro.props
const { Content, headings, remarkPluginFrontmatter } = await entry.render()
// const { post } = entry
// const { data, render } = post
// const { Content, headings, remarkPluginFrontmatter } = await render()
---

{
  //entry.collection === 'page' ? (
  //<PageLayout {...entry.data}>
  //<Content />
  //</PageLayout>
  //) :
  entry.collection === 'posts' ? (
    <PostLayout
      post={entry}
      headings={headings}
      updatedDate={remarkPluginFrontmatter.updatedDate}
    >
      <Content />
    </PostLayout>
  ) : (
    <VertLayout {...entry.data}>
      <Content />
    </VertLayout>
  )
}
<!--
  @source: https://github.com/tonydangblog/blog/blob/main/apps/frontend/src/pages/%5B...slug%5D.astro
-->
